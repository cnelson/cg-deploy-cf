meta:
  environment: ~
  default_quota_definitions:
    default:
       memory_limit: 10240
       total_services: 100
       total_service_keys: 1000
       non_basic_services_allowed: true
       total_routes: 1000
  default_security_group_definitions:
  - name: public_networks
    rules:
    - protocol: all
      destination: 0.0.0.0-9.255.255.255
    - protocol: all
      destination: 11.0.0.0-169.253.255.255
    - protocol: all
      destination: 169.255.0.0-172.15.255.255
    - protocol: all
      destination: 172.32.0.0-192.167.255.255
    - protocol: all
      destination: 192.169.0.0-255.255.255.255
  - name: dns
    rules:
    - protocol: tcp
      destination: 0.0.0.0/0
      ports: '53'
    - protocol: udp
      destination: 0.0.0.0/0
      ports: '53'
  - name: trusted_local_networks
    rules:
    - protocol: all
      destination: 10.10.20.0-10.10.21.255
    - protocol: all
      destination: 10.10.100.0-10.10.101.255
  resource_key: (( merge ))

properties:
  <<: (( merge ))
  app_ssh: ~
  domain: (( merge ))
  ssl:
    skip_cert_verify: (( merge || false ))

  blobstore:
    port: (( merge || 80 ))
    admin_users: (( merge || nil ))
    secure_link:
      secret: (( merge || nil ))
    tls:
      port: (( merge || 443 ))
      cert: ~
      private_key: ~

  loggregator_endpoint:
    shared_secret: (( merge ))

  loggregator:
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    blacklisted_syslog_ranges: ~
    outgoing_dropsonde_port: 8081

  doppler:
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    blacklisted_syslog_ranges: ~
    unmarshaller_count: (( merge || 5 ))

  metron_agent:
    deployment: (( meta.environment ))

  traffic_controller:
    outgoing_port: 8080
    zone: (( merge || nil ))
    disable_access_control: (( merge || nil ))

  collector:
    deployment_name: (( meta.environment ))
    use_newrelic_insights: true
    newrelic_insights:
      api_key: (( merge ))
      app_id: (( merge ))
    use_newrelic_plugin: true
    newrelic_plugin:
      license_key: (( merge ))
  cc:
    jobs:
      global:
        timeout_in_seconds: 14400 # 4 hours
      app_bits_packer:
        timeout_in_seconds: ~
      app_events_cleanup:
        timeout_in_seconds: ~
      app_usage_events_cleanup:
        timeout_in_seconds: ~
      blobstore_delete:
        timeout_in_seconds: ~
      blobstore_upload:
        timeout_in_seconds: ~
      droplet_deletion:
        timeout_in_seconds: ~
      droplet_upload:
        timeout_in_seconds: ~
      model_deletion:
        timeout_in_seconds: ~
      generic:
        number_of_workers: ~

    app_events:
      cutoff_age_in_days: 31
    app_usage_events:
      cutoff_age_in_days: 31
    audit_events:
      cutoff_age_in_days: 31
    service_usage_events:
      cutoff_age_in_days: 31

    users_can_select_backend: true
    default_to_diego_backend: false
    allow_app_ssh_access: true
    default_app_memory: 512
    default_app_disk_in_mb: 1024
    maximum_app_disk_in_mb: 2048
    client_max_body_size: 1536M

    default_health_check_timeout: 60
    maximum_health_check_timeout: 180

    min_cli_version: ~
    min_recommended_cli_version: ~

    external_host: api
    external_port: 9022
    srv_api_uri: (( "https://" external_host "." domain ))

    bulk_api_password: (( merge ))
    internal_api_user: "internal_user"
    internal_api_password: (( bulk_api_password ))

    logging_level: info
    db_logging_level: info

    staging_upload_user: (( merge ))
    staging_upload_password: (( merge ))

    db_encryption_key: (( merge ))

    directories: ~

    disable_custom_buildpacks: false

    broker_client_timeout_seconds: 70
    broker_client_default_async_poll_interval_seconds: (( merge || 60 ))
    broker_client_max_async_poll_duration_minutes: (( merge || 10080 ))

    resource_pool:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      resource_directory_key: (( meta.resource_key "-cc-resources" ))
      fog_connection: ~
      cdn: ~

    packages:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      app_package_directory_key: (( meta.resource_key "-cc-packages" ))
      fog_connection: ~
      cdn: ~
      max_package_size: 1073741824

    droplets:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      droplet_directory_key: (( meta.resource_key "-cc-droplets" ))
      fog_connection: ~
      cdn: ~

    development_mode: false

    newrelic:
      license_key: ~
      environment_name: (( meta.environment ))
      developer_mode: (( cc.development_mode ))
      monitor_mode: true
      capture_params: true
      transaction_tracer:
        enabled: true
        record_sql: "obfuscated"

    buildpacks:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      buildpack_directory_key: (( meta.resource_key "-cc-buildpacks" ))
      fog_connection: ~
      cdn: ~
    quota_definitions: (( merge || meta.default_quota_definitions ))
    default_quota_definition: default

    user_buildpacks: (( merge || [] ))
    system_buildpacks: (( merge || default_buildpacks ))
    default_buildpacks:
      - name: staticfile_buildpack
        package: staticfile-buildpack
      - name: java_buildpack
        package: buildpack_java
      - name: ruby_buildpack
        package: ruby-buildpack
      - name: nodejs_buildpack
        package: nodejs-buildpack
      - name: go_buildpack
        package: go-buildpack
      - name: python_buildpack
        package: python-buildpack
      - name: php_buildpack
        package: php-buildpack
      - name: binary_buildpack
        package: binary-buildpack

    install_buildpacks: (( system_buildpacks user_buildpacks ))

    stacks:
    - name: "lucid64"
      description: "Ubuntu 10.04 on x86-64"
    - name: "cflinuxfs2"
      description: "Cloud Foundry Linux-based filesystem"
    default_stack: "cflinuxfs2"

    security_group_definitions: (( merge || meta.default_security_group_definitions ))
    default_running_security_groups: (( merge || ["public_networks", "dns", "trusted_local_networks"] ))
    default_staging_security_groups: (( merge || ["public_networks", "dns", "trusted_local_networks"] ))

    allowed_cors_domains: (( merge || [] ))
    thresholds:
      api:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
      worker:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
    external_protocol: "https"

    webdav_config:
      private_endpoint: "https://blobstore.service.cf.internal"
      public_endpoint: (( "http://blobstore." domain || nil))
      username: ((  properties.blobstore.admin_users.[0].username || nil ))
      password: ((  properties.blobstore.admin_users.[0].password || nil ))

    reserved_private_domains: ~

    dea_use_https: false

  collectd:
    hostname_prefix: (( meta.environment ".cf.collectd." ))
    riemann_server: "(( merge ))"

  hm9000:
    url: (( "https://hm9000." domain ))
    port: 5155

  login:
    enabled: true
    analytics:
      code: ~
      domain: ~
    url: (( "https://login." domain ))
    uaa_certificate: ~
    protocol: https
    brand: oss
    brand_title: cloud.gov
    asset_base_url: ~
    uaa_base: ~
    self_service_links_enabled: true
    signups_enabled: true
    invitations_enabled: true
    spring_profiles: ~
    messages: ~

    notifications:
      url: ~

    smtp:
      host: ~
      port: ~
      user: ~
      password: ~

    links:
      home: (( "https://console." domain ))
      passwd: (( "https://login." domain "/forgot_password" ))
      signup: (( "https://login." domain "/" ))
      network: ~
      signup-network: ~

    logout: ~

    tiles:
    - name: console
      login-link: (( "https://console." domain ))
      image: https://18f-cloud-gov.s3.amazonaws.com/deck.jpg
      image-hover: https://18f-cloud-gov.s3.amazonaws.com/deck.jpg

    saml: (( merge || ~ ))
    branding: (( merge || ~ ))

    restricted_ips_regex: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}

  uaa:

    port: (( merge || 8080 ))

    ssl:
      port: (( merge || 8443 ))

    url: (( "https://uaa." domain ))
    issuer: (( url ))

    no_ssl: false
    require_https: true

    scim:
      userids_enabled: (( merge || true ))
      users: (( merge ))
      external_groups: ~

    jwt:
      signing_key: (( merge ))
      verification_key: (( merge ))

    cc:
      client_secret: (( merge ))

    admin:
      client_secret: (( merge ))

    authentication:
      policy:
        lockoutAfterFailures: ~
        countFailuresWithinSeconds: ~
        lockoutPeriodSeconds: ~

    login: ~

    ldap: ~

    newrelic: ~

    spring_profiles: ~

    user: ~

    clients:
      <<: (( merge || nil ))
      login:
        override: true
        scope: openid,oauth.approvals
        authorities: oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write
        secret: (( merge ))
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        redirect-uri: (( properties.login.protocol "://login." domain ))
        autoapprove: true
      notifications:
        secret: (( merge ))
        authorities: cloud_controller.admin,scim.read
        authorized-grant-types: client_credentials
      influxdb-firehose-nozzle:
        access-token-validity: 600
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        override: true
        secret: (( merge ))
        scope: openid,oauth.approvals,doppler.firehose
        authorities: oauth.login,doppler.firehose
      cf:
        id: cf
        override: true
        authorized-grant-types: implicit,password,refresh_token
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read
        authorities: uaa.none
        access-token-validity: 600
        refresh-token-validity: 2592000
        autoapprove: true
      doppler:
        override: true
        authorities: uaa.resource
        secret: (( merge ))
      cloud_controller_username_lookup:
        authorities: scim.userids
        secret: (( merge ))
        authorized-grant-types: client_credentials
      cc_routing:
        authorities: routing.router_groups.read
        secret: (( merge ))
        authorized-grant-types: client_credentials
      gorouter:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( merge ))
      tcp_emitter:
        authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( merge ))
      tcp_router:
        authorities: routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( merge ))

    database: ~

    restricted_ips_regex: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}

    zones: (( merge || nil ))

    authentication:
      policy:
        lockoutAfterFailures: 5
        countFailuresWithinSeconds: 3600
        lockoutPeriodSeconds: 300

    password:
      policy:
        minLength: 20
        requireUpperCaseCharacter: 1
        requireLowerCaseCharacter: 1
        requireDigit: 1
        requireSpecialCharacter: 1
        expirePasswordInMonths: 6

  metron_agent:
    deployment: (( meta.environment ))


  nessus-agent: (( merge ))

  newrelic: ~
